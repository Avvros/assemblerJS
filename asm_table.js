'use strict';

// http://ref.x86asm.net/#Instruction-Operand-Codes - description of some types
/*
	sreg - segment register
	moffs - only MOV (a0, a1, a2, a3), [disp] without size
*/

/*
	template guide:
	
	1. Possible opcode template:
	
	
	--------
	
	
	------dw, where
	d is direction bit (d = 0 -> from REG to R/M, else from R/M to REG)
	w is width bit (w = 0 -> operands has 8 bit size, else - 32/16 bit size)
	
	
	-------w
	
	
	---sr---, where // only 1 byte commands
	sr - segment register
	
	
	-----reg, where // only 1 byte commands
	reg - general purpose register (GPR)
	
	
	----wreg
	
	
	------s-, where
	s - sign bit, if s = 0 it means that the constant operand is the same size as first
				  else it means that the constant operand is one byte size that is sign
				  extended to the size of the first operand
				  
	
	----cond, where
	cond - condition, setup of flags in some consequence
*/

/*
{'-------w', '----cond', '---sr---', '--------', '------s-', '----wreg', '-----reg', '------dw', '------sw', '------d-', '-----fpu'}
****************************************
{'data(2/4)', 'data(1)', 'data(2)'} switched into data(4) ...
****************************************
{'addr(4/6)', 'addr(2/4)', 'addr(1)'} switched into addr(6) addr(4)...
****************************************
{'', 'addr', 'data', 'j'}
*/

var disasm_mas =[
	'00 add reg_value=r op1=r/m8 op2=r8 ------dw mrm',
	'01 add reg_value=r op1=r/m16/32 op2=r16/32 ------dw mrm',
	'02 add reg_value=r op1=r8 op2=r/m8 ------dw mrm',
	'03 add reg_value=r op1=r16/32 op2=r/m16/32 ------dw mrm',
	'04 add op1=al op2=imm8 -------w data(1)',
	'05 add op1=eax op2=imm16/32 -------w data(4)',
	'06 push op1=es ---sr---',
	'07 pop op1=es ---sr---',
	'08 or reg_value=r op1=r/m8 op2=r8 ------dw mrm',
	'09 or reg_value=r op1=r/m16/32 op2=r16/32 ------dw mrm',
	'0a or reg_value=r op1=r8 op2=r/m8 ------dw mrm',
	'0b or reg_value=r op1=r16/32 op2=r/m16/32 ------dw mrm',
	'0c or op1=al op2=imm8 -------w data(1)',
	'0d or op1=eax op2=imm16/32 -------w data(4)',
	'0e push op1=cs ---sr---',
	'10 adc reg_value=r op1=r/m8 op2=r8 ------dw mrm',
	'11 adc reg_value=r op1=r/m16/32 op2=r16/32 ------dw mrm',
	'12 adc reg_value=r op1=r8 op2=r/m8 ------dw mrm',
	'13 adc reg_value=r op1=r16/32 op2=r/m16/32 ------dw mrm',
	'14 adc op1=al op2=imm8 -------w data(1)',
	'15 adc op1=eax op2=imm16/32 -------w data(4)',
	'16 push op1=ss ---sr---',
	'17 pop op1=ss ---sr---',
	'18 sbb reg_value=r op1=r/m8 op2=r8 ------dw mrm',
	'19 sbb reg_value=r op1=r/m16/32 op2=r16/32 ------dw mrm',
	'1a sbb reg_value=r op1=r8 op2=r/m8 ------dw mrm',
	'1b sbb reg_value=r op1=r16/32 op2=r/m16/32 ------dw mrm',
	'1c sbb op1=al op2=imm8 -------w data(1)',
	'1d sbb op1=eax op2=imm16/32 -------w data(4)',
	'1e push op1=ds ---sr---',
	'1f pop op1=ds ---sr---',
	'20 and reg_value=r op1=r/m8 op2=r8 ------dw mrm',
	'21 and reg_value=r op1=r/m16/32 op2=r16/32 ------dw mrm',
	'22 and reg_value=r op1=r8 op2=r/m8 ------dw mrm',
	'23 and reg_value=r op1=r16/32 op2=r/m16/32 ------dw mrm',
	'24 and op1=al op2=imm8 -------w data(1)',
	'25 and op1=eax op2=imm16/32 -------w data(4)',
	'27 daa op1=al --------',
	'28 sub reg_value=r op1=r/m8 op2=r8 ------dw mrm',
	'29 sub reg_value=r op1=r/m16/32 op2=r16/32 ------dw mrm',
	'2a sub reg_value=r op1=r8 op2=r/m8 ------dw mrm',
	'2b sub reg_value=r op1=r16/32 op2=r/m16/32 ------dw mrm',
	'2c sub op1=al op2=imm8 -------w data(1)',
	'2d sub op1=eax op2=imm16/32 -------w data(4)',
	'2f das op1=al --------',
	'30 xor reg_value=r op1=r/m8 op2=r8 ------dw mrm',
	'31 xor reg_value=r op1=r/m16/32 op2=r16/32 ------dw mrm',
	'32 xor reg_value=r op1=r8 op2=r/m8 ------dw mrm',
	'33 xor reg_value=r op1=r16/32 op2=r/m16/32 ------dw mrm',
	'34 xor op1=al op2=imm8 -------w data(1)',
	'35 xor op1=eax op2=imm16/32 -------w data(4)',
	'37 aaa op1=al op2=ah --------',
	'38 cmp reg_value=r op1=r/m8 op2=r8 ------dw mrm',
	'39 cmp reg_value=r op1=r/m16/32 op2=r16/32 ------dw mrm',
	'3a cmp reg_value=r op1=r8 op2=r/m8 ------dw mrm',
	'3b cmp reg_value=r op1=r16/32 op2=r/m16/32 ------dw mrm',
	'3c cmp op1=al op2=imm8 -------w data(1)',
	'3d cmp op1=eax op2=imm16/32 -------w data(4)',
	'3f aas op1=al op2=ah --------',
	'40 inc op1=eax -----reg',
	'41 inc op1=ecx -----reg',
	'42 inc op1=edx -----reg',
	'43 inc op1=ebx -----reg',
	'44 inc op1=esp -----reg',
	'45 inc op1=ebp -----reg',
	'46 inc op1=esi -----reg',
	'47 inc op1=edi -----reg',
	'48 dec op1=eax -----reg',
	'49 dec op1=ecx -----reg',
	'4a dec op1=edx -----reg',
	'4b dec op1=ebx -----reg',
	'4c dec op1=esp -----reg',
	'4d dec op1=ebp -----reg',
	'4e dec op1=esi -----reg',
	'4f dec op1=edi -----reg',
	'50 push op1=eax -----reg',
	'51 push op1=ecx -----reg',
	'52 push op1=edx -----reg',
	'53 push op1=ebx -----reg',
	'54 push op1=esp -----reg',
	'55 push op1=ebp -----reg',
	'56 push op1=esi -----reg',
	'57 push op1=edi -----reg',
	'58 pop op1=eax -----reg',
	'59 pop op1=ecx -----reg',
	'5a pop op1=edx -----reg',
	'5b pop op1=ebx -----reg',
	'5c pop op1=esp -----reg',
	'5d pop op1=ebp -----reg',
	'5e pop op1=esi -----reg',
	'5f pop op1=edi -----reg',
	'60 pusha op1=ax op2=cx op3=dx --------',
	'61 popa op1=di op2=si op3=bp --------',
	'62 bound reg_value=r op1=r16/32 op2=m16/32&16/32 op3=eflags -------- mrm',
	'63 arpl reg_value=r op1=r/m16 op2=r16 -------- mrm',
	'68 push op1=imm16/32 ------s- data(4)',
	'69 imul reg_value=r op1=r16/32 op2=r/m16/32 op3=imm16/32 ------s- mrm data(4)',
	'6a push op1=imm8 ------s- data(1)',
	'6b imul reg_value=r op1=r16/32 op2=r/m16/32 op3=imm8 ------s- mrm data(1)',
	'6c ins op1=m8 op2=dx -------w',
	'6d ins op1=m16/32 op2=dx -------w',
	'6e outs op1=dx op2=m8 -------w',
	'6f outs op1=dx op2=m16/32 -------w',
	'70 jo op1=rel8 ----cond addr(1)',
	'71 jno op1=rel8 ----cond addr(1)',
	'72 jb op1=rel8 ----cond addr(1)',
	'73 jnb op1=rel8 ----cond addr(1)',
	'74 jz op1=rel8 ----cond addr(1)',
	'75 jnz op1=rel8 ----cond addr(1)',
	'76 jbe op1=rel8 ----cond addr(1)',
	'77 jnbe op1=rel8 ----cond addr(1)',
	'78 js op1=rel8 ----cond addr(1)',
	'79 jns op1=rel8 ----cond addr(1)',
	'7a jp op1=rel8 ----cond addr(1)',
	'7b jnp op1=rel8 ----cond addr(1)',
	'7c jl op1=rel8 ----cond addr(1)',
	'7d jnl op1=rel8 ----cond addr(1)',
	'7e jle op1=rel8 ----cond addr(1)',
	'7f jnle op1=rel8 ----cond addr(1)',
	'80 adc reg_value=2 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'80 add reg_value=0 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'80 and reg_value=4 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'80 cmp reg_value=7 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'80 or reg_value=1 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'80 sbb reg_value=3 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'80 sub reg_value=5 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'80 xor reg_value=6 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'81 adc reg_value=2 op1=r/m16/32 op2=imm16/32 ------sw nnn data(4)',
	'81 add reg_value=0 op1=r/m16/32 op2=imm16/32 ------sw nnn data(4)',
	'81 and reg_value=4 op1=r/m16/32 op2=imm16/32 ------sw nnn data(4)',
	'81 cmp reg_value=7 op1=r/m16/32 op2=imm16/32 ------sw nnn data(4)',
	'81 or reg_value=1 op1=r/m16/32 op2=imm16/32 ------sw nnn data(4)',
	'81 sbb reg_value=3 op1=r/m16/32 op2=imm16/32 ------sw nnn data(4)',
	'81 sub reg_value=5 op1=r/m16/32 op2=imm16/32 ------sw nnn data(4)',
	'81 xor reg_value=6 op1=r/m16/32 op2=imm16/32 ------sw nnn data(4)',
	'82 adc reg_value=2 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'82 add reg_value=0 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'82 and reg_value=4 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'82 cmp reg_value=7 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'82 or reg_value=1 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'82 sbb reg_value=3 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'82 sub reg_value=5 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'82 xor reg_value=6 op1=r/m8 op2=imm8 ------sw nnn data(1)',
	'83 adc reg_value=2 op1=r/m16/32 op2=imm8 ------sw nnn data(1)',
	'83 add reg_value=0 op1=r/m16/32 op2=imm8 ------sw nnn data(1)',
	'83 and reg_value=4 op1=r/m16/32 op2=imm8 ------sw nnn data(1)',
	'83 cmp reg_value=7 op1=r/m16/32 op2=imm8 ------sw nnn data(1)',
	'83 or reg_value=1 op1=r/m16/32 op2=imm8 ------sw nnn data(1)',
	'83 sbb reg_value=3 op1=r/m16/32 op2=imm8 ------sw nnn data(1)',
	'83 sub reg_value=5 op1=r/m16/32 op2=imm8 ------sw nnn data(1)',
	'83 xor reg_value=6 op1=r/m16/32 op2=imm8 ------sw nnn data(1)',
	'84 test reg_value=r op1=r/m8 op2=r8 -------w mrm',
	'85 test reg_value=r op1=r/m16/32 op2=r16/32 -------w mrm',
	'86 xchg reg_value=r op1=r8 op2=r/m8 -------w mrm',
	'87 xchg reg_value=r op1=r16/32 op2=r/m16/32 -------w mrm',
	'88 mov reg_value=r op1=r/m8 op2=r8 ------dw mrm',
	'89 mov reg_value=r op1=r/m16/32 op2=r16/32 ------dw mrm',
	'8a mov reg_value=r op1=r8 op2=r/m8 ------dw mrm',
	'8b mov reg_value=r op1=r16/32 op2=r/m16/32 ------dw mrm',
	'8c mov reg_value=r op1=m16 op2=sreg ------d- mrm',
	'8d lea reg_value=r op1=r16/32 op2=m -------- mrm',
	'8e mov reg_value=r op1=sreg op2=r/m16 ------d- mrm',
	'8f pop reg_value=0 op1=r/m16/32 -------- nnn',
	'90 nop --------',
//  '90 xchg op1=eax op2=eax -----reg',
	'91 xchg op1=ecx op2=eax -----reg',
	'92 xchg op1=edx op2=eax -----reg',
	'93 xchg op1=ebx op2=eax -----reg',
	'94 xchg op1=esp op2=eax -----reg',
	'95 xchg op1=ebp op2=eax -----reg',
	'96 xchg op1=esi op2=eax -----reg',
	'97 xchg op1=edi op2=eax -----reg',
//  '98 cbw op1=ax op2=al --------',
	'98 cwde op1=eax op2=ax --------', 
	'99 cdq op1=edx op2=eax --------',
	'99 cwd op1=dx op2=ax --------',
	'9a call op1=ptr16:16/32 -------- addr(6)',
	'9b wait --------',
	'9c pushf op1=flags --------',
	'9d popf op1=flags --------',
	'9e sahf op1=ah --------',
	'9f lahf op1=ah --------',
	'a0 mov op1=al op2=moffs8 ------dw addr(4)',
	'a1 mov op1=eax op2=moffs16/32 ------dw addr(4)',
	'a2 mov op1=moffs8 op2=al ------dw addr(4)',
	'a3 mov op1=moffs16/32 op2=eax ------dw addr(4)',
	'a4 movs op1=m8 op2=m8 -------w',
//	'a5 movs op1=m16 op2=m16 -------w',
	'a5 movs op1=m16/32 op2=m16/32 -------w',
	'a6 cmps op1=m8 op2=m8 -------w',
//	'a7 cmps op1=m16 op2=m16 -------w',
	'a7 cmps op1=m16/32 op2=m16/32 -------w',
	'a8 test op1=al op2=imm8 -------w data(1)',
	'a9 test op1=eax op2=imm16/32 -------w data(4)',
	'aa stos op1=m8 op2=al -------w',
//	'ab stos op1=m16 op2=ax -------w',
	'ab stos op1=m16/32 op2=eax -------w',
	'ac lods op1=al op2=m8 -------w',
//	'ad lods op1=ax op2=m16 -------w',
	'ad lods op1=eax op2=m16/32 -------w',
	'ae scas op1=m8 op2=al -------w',
//	'af scas op1=m16 op2=ax -------w',
	'af scas op1=m16/32 op2=eax -------w',
	'b0 mov op1=al op2=imm8 ----wreg data(1)',
	'b1 mov op1=cl op2=imm8 ----wreg data(1)',
	'b2 mov op1=dl op2=imm8 ----wreg data(1)',
	'b3 mov op1=bl op2=imm8 ----wreg data(1)',
	'b4 mov op1=ah op2=imm8 ----wreg data(1)',
	'b5 mov op1=ch op2=imm8 ----wreg data(1)',
	'b6 mov op1=dh op2=imm8 ----wreg data(1)',
	'b7 mov op1=bh op2=imm8 ----wreg data(1)',
	'b8 mov op1=eax op2=imm16/32 ----wreg data(4)',
	'b9 mov op1=ecx op2=imm16/32 ----wreg data(4)',
	'ba mov op1=edx op2=imm16/32 ----wreg data(4)',
	'bb mov op1=ebx op2=imm16/32 ----wreg data(4)',
	'bc mov op1=esp op2=imm16/32 ----wreg data(4)',
	'bd mov op1=ebp op2=imm16/32 ----wreg data(4)',
	'be mov op1=esi op2=imm16/32 ----wreg data(4)',
	'bf mov op1=edi op2=imm16/32 ----wreg data(4)',
	'c0 rcl reg_value=2 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'c0 rcr reg_value=3 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'c0 rol reg_value=0 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'c0 ror reg_value=1 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'c0 sal reg_value=6 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'c0 sar reg_value=7 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'c0 shl reg_value=4 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'c0 shr reg_value=5 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'c1 rcl reg_value=2 op1=r/m16/32 op2=imm8 -------w nnn data(1)',
	'c1 rcr reg_value=3 op1=r/m16/32 op2=imm8 -------w nnn data(1)',
	'c1 rol reg_value=0 op1=r/m16/32 op2=imm8 -------w nnn data(1)',
	'c1 ror reg_value=1 op1=r/m16/32 op2=imm8 -------w nnn data(1)',
	'c1 sal reg_value=6 op1=r/m16/32 op2=imm8 -------w nnn data(1)',
	'c1 sar reg_value=7 op1=r/m16/32 op2=imm8 -------w nnn data(1)',
	'c1 shl reg_value=4 op1=r/m16/32 op2=imm8 -------w nnn data(1)',
	'c1 shr reg_value=5 op1=r/m16/32 op2=imm8 -------w nnn data(1)',
	'c2 ret op1=imm16 -------- data(2)',
	'c3 ret --------',
	'c4 les reg_value=r op1=es op2=r16/32 op3=m16:16/32 -------- mrm',
	'c5 lds reg_value=r op1=ds op2=r16/32 op3=m16:16/32 -------- mrm',
	'c6 mov reg_value=0 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'c7 mov reg_value=0 op1=r/m16/32 op2=imm16/32 -------w nnn data(4)',
	'c8 enter op1=ebp op2=imm16 op3=imm8 -------- data(2) data(1)',
	'c9 leave op1=ebp --------',
	'cc int op1=3 op2=eflags --------',
	'cd int op1=imm8 op2=eflags -------- data(1)',
	'ce into op1=eflags --------',
	'cf iret op1=flags --------',
	'd0 rcl reg_value=2 op1=r/m8 op2=1 -------w nnn',
	'd0 rcr reg_value=3 op1=r/m8 op2=1 -------w nnn',
	'd0 rol reg_value=0 op1=r/m8 op2=1 -------w nnn',
	'd0 ror reg_value=1 op1=r/m8 op2=1 -------w nnn',
	'd0 sal reg_value=6 op1=r/m8 op2=1 -------w nnn',
	'd0 sar reg_value=7 op1=r/m8 op2=1 -------w nnn',
	'd0 shl reg_value=4 op1=r/m8 op2=1 -------w nnn',
	'd0 shr reg_value=5 op1=r/m8 op2=1 -------w nnn',
	'd1 rcl reg_value=2 op1=r/m16/32 op2=1 -------w nnn',
	'd1 rcr reg_value=3 op1=r/m16/32 op2=1 -------w nnn',
	'd1 rol reg_value=0 op1=r/m16/32 op2=1 -------w nnn',
	'd1 ror reg_value=1 op1=r/m16/32 op2=1 -------w nnn',
	'd1 sal reg_value=6 op1=r/m16/32 op2=1 -------w nnn',
	'd1 sar reg_value=7 op1=r/m16/32 op2=1 -------w nnn',
	'd1 shl reg_value=4 op1=r/m16/32 op2=1 -------w nnn',
	'd1 shr reg_value=5 op1=r/m16/32 op2=1 -------w nnn',
	'd2 rcl reg_value=2 op1=r/m8 op2=cl -------w nnn',
	'd2 rcr reg_value=3 op1=r/m8 op2=cl -------w nnn',
	'd2 rol reg_value=0 op1=r/m8 op2=cl -------w nnn',
	'd2 ror reg_value=1 op1=r/m8 op2=cl -------w nnn',
	'd2 sal reg_value=6 op1=r/m8 op2=cl -------w nnn',
	'd2 sar reg_value=7 op1=r/m8 op2=cl -------w nnn',
	'd2 shl reg_value=4 op1=r/m8 op2=cl -------w nnn',
	'd2 shr reg_value=5 op1=r/m8 op2=cl -------w nnn',
	'd3 rcl reg_value=2 op1=r/m16/32 op2=cl -------w nnn',
	'd3 rcr reg_value=3 op1=r/m16/32 op2=cl -------w nnn',
	'd3 rol reg_value=0 op1=r/m16/32 op2=cl -------w nnn',
	'd3 ror reg_value=1 op1=r/m16/32 op2=cl -------w nnn',
	'd3 sal reg_value=6 op1=r/m16/32 op2=cl -------w nnn',
	'd3 sar reg_value=7 op1=r/m16/32 op2=cl -------w nnn',
	'd3 shl reg_value=4 op1=r/m16/32 op2=cl -------w nnn',
	'd3 shr reg_value=5 op1=r/m16/32 op2=cl -------w nnn',
	'd4 aam op1=al op2=ah -------- 00001010',
	'd5 aad op1=al op2=ah -------- 00001010',
	'd6 salc op1=al --------',
	'd7 xlat op1=al op2=m8 --------',
	'e0 loopnz op1=ecx op2=rel8 -------- addr(1)',
	'e1 loopz op1=ecx op2=rel8 -------- addr(1)',
	'e2 loop op1=ecx op2=rel8 -------- addr(1)',
	'e3 jecxz op1=rel8 op2=cx -------- addr(1)',
	'e4 in op1=al op2=imm8 -------w data(1)',
	'e5 in op1=eax op2=imm8 -------w data(1)',
	'e6 out op1=imm8 op2=al -------w data(1)',
	'e7 out op1=imm8 op2=eax -------w data(1)',
	'e8 call op1=rel16/32 -------- addr(4)',
	'e9 jmp op1=rel16/32 -------- addr(4)',
	'ea jmp op1=ptr16:16/32 -------- addr(6)',
	'eb jmp op1=rel8 -------- addr(1)',
	'ec in op1=al op2=dx -------w',
	'ed in op1=eax op2=dx -------w',
	'ee out op1=dx op2=al -------w',
	'ef out op1=dx op2=eax -------w',
	'f4 hlt --------',
	'f5 cmc --------',
	'f6 div reg_value=6 op1=al op2=ah op3=ax -------w nnn',
	'f6 idiv reg_value=7 op1=al op2=ah op3=ax -------w nnn',
	'f6 imul reg_value=5 op1=ax op2=al op3=r/m8 -------w nnn',
	'f6 mul reg_value=4 op1=ax op2=al op3=r/m8 -------w nnn',
	'f6 neg reg_value=3 op1=r/m8 -------w nnn',
	'f6 not reg_value=2 op1=r/m8 -------w nnn',
	'f6 test reg_value=0 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'f6 test reg_value=1 op1=r/m8 op2=imm8 -------w nnn data(1)',
	'f7 div reg_value=6 op1=edx op2=eax op3=r/m16/32 -------w nnn',
	'f7 idiv reg_value=7 op1=edx op2=eax op3=r/m16/32 -------w nnn',
	'f7 imul reg_value=5 op1=edx op2=eax op3=r/m16/32 -------w nnn',
	'f7 mul reg_value=4 op1=edx op2=eax op3=r/m16/32 -------w nnn',
	'f7 neg reg_value=3 op1=r/m16/32 -------w nnn',
	'f7 not reg_value=2 op1=r/m16/32 -------w nnn',
	'f7 test reg_value=0 op1=r/m16/32 op2=imm16/32 -------w nnn data(4)',
	'f7 test reg_value=1 op1=r/m16/32 op2=imm16/32 -------w nnn data(4)',
	'f8 clc --------',
	'f9 stc --------',
	'fa cli --------',
	'fb sti --------',
	'fc cld --------',
	'fd std --------',
	'fe dec reg_value=1 op1=r/m8 -------w nnn',
	'fe inc reg_value=0 op1=r/m8 -------w nnn',
	'ff call reg_value=2 op1=r/m16/32 -------- nnn',
	'ff call reg_value=2 op1=r/m16/32 -------- nnn',
	'ff dec reg_value=1 op1=r/m16/32 -------w nnn',
	'ff inc reg_value=0 op1=r/m16/32 -------w nnn',
	'ff jmp reg_value=4 op1=r/m16/32 -------- nnn',
	'ff jmp reg_value=4 op1=r/m16/32 -------- nnn',
	'ff push reg_value=6 op1=r/m16/32 -------- nnn',
];

var disasm_map = {};

(function () 
{
	var code = disasm_mas[0].substr(0, 2);
	
	disasm_map[code] = [disasm_mas[0].substring(3)];
	
	for (var i = 1; i < disasm_mas.length; i++) {
		code = disasm_mas[i].substr(0, 2);
		
		if (disasm_map[code] == undefined)
			disasm_map[code] = [disasm_mas[i].substring(3)];
		else
			disasm_map[code].push(disasm_mas[i].substring(3));
		
	}
	
	//console.log(disasm_map);
}) ();